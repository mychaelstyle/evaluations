# Generated by Django 4.1 on 2022-12-23 23:52

import account.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import stdimage.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('deleted_at', models.DateTimeField(blank=True, default=None, editable=False, null=True, verbose_name='deleted date')),
                ('username', models.CharField(max_length=64, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('viewname', models.CharField(blank=True, max_length=50, verbose_name='viewname')),
                ('first_name', models.CharField(blank=True, max_length=50, verbose_name='first_name')),
                ('last_name', models.CharField(blank=True, max_length=50, verbose_name='last_name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email')),
                ('profile_image', stdimage.models.StdImageField(blank=True, force_min_size=False, null=True, upload_to=account.models.User.get_profile_image_path, variations={'large': (600, 600), 'midium': (300, 300), 'thumbnail': (100, 100, True)}, verbose_name='profile_image')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date_joined')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff_status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, default=None, editable=False, null=True, verbose_name='deleted date')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated_at')),
                ('name', models.CharField(max_length=255, validators=[django.core.validators.MinLengthValidator(6)], verbose_name='account_organization_name')),
                ('zipcode', models.CharField(blank=True, max_length=8, null=True, validators=[django.core.validators.RegexValidator(regex='^\\d{3}-\\d{4}$')], verbose_name='zipcode')),
                ('state', models.CharField(blank=True, max_length=64, null=True, verbose_name='state')),
                ('city', models.CharField(blank=True, max_length=64, null=True, verbose_name='city')),
                ('street', models.CharField(blank=True, max_length=255, null=True, verbose_name='street')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='address')),
                ('email', models.CharField(blank=True, max_length=255, null=True, verbose_name='email')),
                ('telephone', models.CharField(blank=True, max_length=16, null=True, validators=[django.core.validators.RegexValidator(regex='^0\\d{1,4}-\\d{1,4}-\\d{3,4}$')], verbose_name='telephone')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('industory', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'メーカー：食品・農林・水産'), (11, 'メーカー：建設・住宅・インテリア'), (21, 'メーカー：遷移・化学・薬品・化粧品'), (31, 'メーカー：鉄鋼・金属・鉱業'), (41, 'メーカー：機械・プラント'), (51, 'メーカー：電子・電気機器'), (61, 'メーカー：自動車・輸送容器機'), (71, 'メーカー：精密・医療機器'), (81, 'メーカー：飲茶靴・事務機器関連'), (91, 'メーカー：スポーツ・玩具'), (101, 'メーカー：その他メーカー'), (111, '商社：総合商社'), (121, '商社：専門商社'), (131, '小売：百貨店・スーパー'), (141, '小売：コンビニ'), (151, '小売：専門店'), (161, '金融：銀行・証券'), (171, '金融：クレジット'), (181, '金融：信販・リース'), (191, '金融：その他金融'), (201, '金融：生保・損保'), (211, 'サービス・インフラ：不動産'), (221, 'サービス・インフラ：鉄道・航空・運輸・物流'), (231, 'サービス・インフラ：電力・ガス・エネルギー'), (241, 'サービス・インフラ：フードサービス'), (251, 'サービス・インフラ：ホテル・旅行'), (261, 'サービス・インフラ：医療・福祉'), (271, 'サービス・インフラ：アミューズメント・レジャー'), (281, 'サービス・インフラ：その他サービス'), (291, 'サービス・インフラ：コンサルティング・調査'), (301, 'サービス・インフラ：人材サービス'), (311, 'サービス・インフラ：教育'), (321, 'ソフトウェア：ソフトウェア'), (331, 'ソフトウェア：インターネット'), (341, 'ソフトウェア：通信'), (351, '広告・出版・マスコミ：放送'), (361, '広告・出版・マスコミ：新聞'), (371, '広告・出版・マスコミ：出版'), (381, '広告・出版・マスコミ：広告'), (391, '官公庁・公社・団体：公社・団体'), (401, '官公庁・公社・団体：官公庁'), (999, 'others')], null=True, verbose_name='industory')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='account_organization_owner')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganizationUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, default=None, editable=False, null=True, verbose_name='deleted date')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated_at')),
                ('user_type', models.PositiveSmallIntegerField(choices=[(1, 'user_type_owner'), (2, 'user_type_administrator'), (3, 'user_type_user'), (10, 'user_type_guest')], default=3, verbose_name='user_type')),
                ('department', models.CharField(blank=True, max_length=255, null=True, verbose_name='department_name')),
                ('position', models.CharField(blank=True, max_length=255, null=True, verbose_name='position')),
                ('role', models.CharField(blank=True, max_length=255, null=True, verbose_name='role')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('notes', models.TextField(blank=True, max_length=1000, null=True, verbose_name='notes')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='users', to='account.organization', verbose_name='organization')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='organizations', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
